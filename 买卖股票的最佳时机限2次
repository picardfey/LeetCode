class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        @cache
        def dfs(i, j, hold):
            if j<0: return -inf
            if i<0: return -inf if hold else 0
            if hold: return max(dfs(i-1, j, True), dfs(i-1, j-1, False)-prices[i])
            return max(dfs(i-1, j, True)+prices[i], dfs(i-1, j, False))
        return dfs(len(prices)-1, 2, False)
#翻译成递堆，空间优化版本
f = [[-inf]*2 for _ in range(k+2)]
        for i in range(1, k+2):
            f[i][0] = 0
        for p in prices:
            for j in range(1, k+2):
                f[j][0] = max(f[j][0], f[j][1]+p)
                f[j][1] = max(f[j-1][0]-p, f[j][1])
        return f[-1][0]
