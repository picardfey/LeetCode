class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        m, n = len(board), len(board[0])
        def dfs(board, i, j):
            if not 0<=i<m or not 0<=j<n or board[i][j]=='X': return 
            note.add((i, j))
            board[i][j] = 'X'
            dfs(board, i, j-1)
            dfs(board, i, j+1)
            dfs(board, i+1, j)
            dfs(board, i-1, j)
        note = set()
        for i in range(m):
            if board[i][0]=='O':
                dfs(board, i, 0)
            if board[i][n-1]=='O':
                dfs(board, i, n-1)
        for j in range(n):
            if board[0][j]=='O':
                dfs(board, 0, j)
            if board[m-1][j]=='O':
                dfs(board, m-1, j)
        for i in range(m):
            for j in range(n):
                if (i, j) in note:
                    board[i][j] = 'O'   
                else:
                    board[i][j] = 'X'  
