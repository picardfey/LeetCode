class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        ans = 1
        m, n = len(matrix), len(matrix[0])   # 超时了，但是对的。
        def dfs(i, j, prev=-inf):
            if not 0<=i<m or not 0<=j<n or matrix[i][j]<=prev: return
            nonlocal path, ans
            path+=1
            prev = matrix[i][j]
            matrix[i][j] = -1
            ans = max(ans, path)
            dfs(i-1, j, prev)
            dfs(i+1, j, prev)
            dfs(i, j-1, prev)
            dfs(i, j+1, prev)
            matrix[i][j] = prev
            path-=1
        for i in range(m):
            for j in range(n):
                path = 0
                dfs(i, j)
        return ans
################################################################################################
class Solution:
    
    DIRS = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix:
            return 0
        
        @lru_cache(None)
        def dfs(row: int, column: int) -> int:
            best = 1
            for dx, dy in Solution.DIRS:
                newRow, newColumn = row + dx, column + dy
                if 0 <= newRow < rows and 0 <= newColumn < columns and matrix[newRow][newColumn] > matrix[row][column]:
                    best = max(best, dfs(newRow, newColumn) + 1)
            return best

        ans = 0
        rows, columns = len(matrix), len(matrix[0])
        for i in range(rows):
            for j in range(columns):
                ans = max(ans, dfs(i, j))
        return ans
