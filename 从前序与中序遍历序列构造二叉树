# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        def recur(root, left, right):
            if left>right: return
            node = TreeNode(preorder[root])
            i = dic[preorder[root]]
            node.left = recur(root+1, left, i-1)
            node.right = recur(i-left+root+1, i+1, right) 
            return node
        dic, preorder = {}, preorder
        for i in range(len(inorder)):
            dic[inorder[i]] = i
        return recur(0, 0, len(inorder)-1)
        def recur(left, right):
            if left>right: return 
            val = preorder.popleft()
            node = TreeNode(val)
            i = dic[val]
            node.left = recur(left, i-1)
            node.right = recur(i+1, right)
            return node
        preorder, dic = deque(preorder), {}
        dic = {val:idx for idx, val in enumerate(inorder)}
        return recur(0, len(inorder)-1)
