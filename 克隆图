"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:
    def __init__(self):
        self.visit = {}
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        # 深度遍历吧
        if not node: return node
        if node in self.visit: return self.visit[node]
        node_clone = Node(node.val, [])
        self.visit[node] = node_clone
        if node.neighbors:
            node_clone.neighbors = [self.cloneGraph(n) for n in node.neighbors]
        return node_clone
